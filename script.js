// script.js

import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-analytics.js";
import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import {
    getFirestore,
    collection,
    addDoc,
    query,
    orderBy,
    limit,
    onSnapshot,
    doc,
    setDoc,
    getDoc,
    updateDoc,
    arrayUnion,
    arrayRemove,
    where,
    serverTimestamp,
    getDocs,
    deleteDoc,
    writeBatch
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

const firebaseConfig = {
    apiKey: "AIzaSyApT5nPgxEDOA8iqkXlzo2QQGInS3TnhtU",
    authDomain: "just-anonymous.firebaseapp.com",
    projectId: "just-anonymous",
    storageBucket: "just-anonymous.firebasestorage.app",
    messagingSenderId: "419400824575",
    appId: "1:419400824575:web:6b5f1c58d7af8a090efeca",
    measurementId: "G-JS89445Z60"
};

const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app); // EÄŸer kullanmÄ±yorsan bu satÄ±rÄ± kaldÄ±rabilirsin
const auth = getAuth(app);
const db = getFirestore(app);

// Sabitler
const MESSAGES_PER_PAGE = 10;
const dailyQuestions = [
    "Hayatta seni en Ã§ok motive eden ÅŸey nedir?",
    "En bÃ¼yÃ¼k piÅŸmanlÄ±ÄŸÄ±n ne ve neden?",
    "EÄŸer zamanÄ± geriye alabilseydin, hangi anÄ± tekrar yaÅŸardÄ±n?",
    "Sence insan doÄŸasÄ± gereÄŸi iyi midir, kÃ¶tÃ¼ mÃ¼dÃ¼r?",
    "Ã–lÃ¼mden sonra yaÅŸam var mÄ±, varsa nasÄ±l bir yer hayal ediyorsun?",
    "Evrenin bir baÅŸlangÄ±cÄ± ve sonu var mÄ±, varsa neyden ibaret?",
    "Sence gerÃ§ek aÅŸk nedir ve onu nasÄ±l tanÄ±mlarsÄ±n?",
    "HayatÄ±ndaki en deÄŸerli hediye neydi ve neden?",
    "Bir sÃ¼per gÃ¼cÃ¼n olsaydÄ±, bu ne olurdu ve neden?",
    "EÄŸer 24 saatin kalsaydÄ±, ne yapardÄ±n?",
    "MutluluÄŸu nasÄ±l tanÄ±mlarsÄ±n ve seni ne mutlu eder?",
    "Din ve bilim arasÄ±ndaki iliÅŸkiyi nasÄ±l gÃ¶rÃ¼yorsun?",
    "Sence hayatÄ±n anlamÄ± var mÄ±, varsa nedir?",
    "En bÃ¼yÃ¼k korkun ne ve bu korkunla nasÄ±l baÅŸa Ã§Ä±karsÄ±n?",
    "Tekrar doÄŸsan hangi hayvan olmak isterdin ve neden?",
    "Para mÄ± gÃ¼Ã§ mÃ¼, hangisi daha Ã¶nemli ve neden?",
    "Teknolojinin insanlÄ±k Ã¼zerindeki en bÃ¼yÃ¼k etkisi nedir?",
    "AÅŸk mÄ± mantÄ±k mÄ±, iliÅŸkilerde hangisi daha aÄŸÄ±r basmalÄ±?",
    "Bir insanÄ± gerÃ§ekten sevdiÄŸini nasÄ±l anlarsÄ±n?",
    "Affetmek mi, unutmak mÄ±, hangisi daha zor?",
    "Sence kader mi, yoksa Ã¶zgÃ¼r irade mi hayatÄ±mÄ±zÄ± ÅŸekillendirir?",
    "SanatÄ±n insanlÄ±k iÃ§in Ã¶nemi nedir?",
    "EÄŸer zamanda yolculuk yapabilseydin, hangi dÃ¶neme giderdin?",
    "En Ã§ok ilham aldÄ±ÄŸÄ±n kiÅŸi kim ve neden?",
    "Sence yalnÄ±zlÄ±k iyi bir ÅŸey mi, yoksa kÃ¶tÃ¼ mÃ¼?",
    "HayatÄ±nda en Ã§ok neye ÅŸÃ¼krediyorsun?",
    "Seni en Ã§ok gÃ¼ldÃ¼ren ÅŸey nedir?",
    "Bir gÃ¼n herkesin okumasÄ±nÄ± istediÄŸin bir kitap var mÄ±?",
    "DÃ¼nyayÄ± deÄŸiÅŸtirmek iÃ§in yapabileceÄŸin tek bir ÅŸey olsaydÄ±, ne olurdu?",
    "Bir iliÅŸkide gÃ¼ven mi, tutku mu daha Ã¶nemlidir?",
    "En sevdiÄŸin anÄ± ne ve neden?",
    "HayatÄ±nda aldÄ±ÄŸÄ±n en iyi tavsiye neydi?",
    "Sence mutluluÄŸun sÄ±rrÄ± nedir?",
    "Hangi konularda kendini geliÅŸtirmek istersin?",
    "En utanÃ§ verici anÄ±n neydi?",
    "Hangi filmi defalarca izleyebilirsin?",
    "Ã‡ocukluÄŸundan en Ã§ok neyi Ã¶zlÃ¼yorsun?",
    "En bÃ¼yÃ¼k hayalin nedir ve onu gerÃ§ekleÅŸtirmek iÃ§in neler yapÄ±yorsun?",
    "Hangi beceriyi anÄ±nda kazanmak isterdin?",
    "EÄŸer hayat bir oyun olsaydÄ±, hangi seviyesinde olurdun?"
];

// DeÄŸiÅŸkenler
let currentUserUid = null;
let currentUserNickname = null;
let currentUserColor = null;
let currentPage = 1;
let shoutMessages = [];
let shoutIndex = 0;
let shoutInterval = null;
let currentDailyQuestion = null;
const uidToNicknameMap = {};

// Zaman formatlama fonksiyonu
function formatDateTime(timestamp) {
    if (!timestamp) return "";
    const d = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    return d.toLocaleString("tr-TR", {
        year: "2-digit",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
    });
}

// Renk Ã¼retme ve dÃ¶nÃ¼ÅŸtÃ¼rme fonksiyonlarÄ±
function hslToRgb(h, s, l) {
    l /= 100;
    const a = s * Math.min(l, 1 - l) / 100;
    const f = n => {
        const k = (n + h / 30) % 12;
        const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        return Math.round(255 * color);
    };
    return [f(0), f(8), f(4)];
}

function generateRandomColor() {
    const h = Math.floor(Math.random() * 360);
    const s = Math.floor(Math.random() * (90 - 70) + 70);
    const l = Math.floor(Math.random() * (70 - 50) + 50);

    const [r, g, b] = hslToRgb(h, s, l);
    return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
}

// UID ile takma ad ve renk alma
async function getNicknameByUid(uid) {
    if (typeof uid !== 'string' || !uid) {
        console.warn("getNicknameByUid: GeÃ§ersiz UID saÄŸlandÄ±:", uid);
        return { nickname: "Bilinmeyen KullanÄ±cÄ±", color: "#CCCCCC" };
    }

    if (uidToNicknameMap[uid]) {
        return uidToNicknameMap[uid];
    }
    try {
        const userDoc = await getDoc(doc(db, "users", uid));
        if (userDoc.exists()) {
            const userData = userDoc.data();
            const nickname = userData.nickname;
            const color = userData.color || generateRandomColor();

            if (!userData.color) {
                await updateDoc(doc(db, "users", uid), { color: color });
            }

            uidToNicknameMap[uid] = { nickname, color };
            return { nickname, color };
        } else {
            console.warn("getNicknameByUid: KullanÄ±cÄ± belgesi bulunamadÄ±:", uid);
            return { nickname: "Bilinmeyen KullanÄ±cÄ±", color: "#CCCCCC" };
        }
    } catch (error) {
        console.error("KullanÄ±cÄ± takma adÄ± veya renk alÄ±namadÄ±:", error);
        return { nickname: "Bilinmeyen KullanÄ±cÄ±", color: "#CCCCCC" };
    }
}

// Toplam tepki sayÄ±sÄ±nÄ± hesaplama
function getTotalReactions(msg) {
    return Object.values(msg.reactions || {}).reduce((acc, arr) => acc + arr.length, 0);
}

// Login Ä°ÅŸlemleri
document.getElementById("loginButton").addEventListener("click", async () => {
    const nickname = document.getElementById("nickname").value.trim();

    if (!nickname) {
        alert("LÃ¼tfen bir nick girin.");
        return;
    }

    try {
        const userCredential = await signInAnonymously(auth);
        const user = userCredential.user;
        currentUserUid = user.uid;
        currentUserNickname = nickname;

        let userColor = null;
        const userDocRef = doc(db, "users", currentUserUid);
        const userDocSnap = await getDoc(userDocRef);

        if (userDocSnap.exists() && userDocSnap.data().color) {
            userColor = userDocSnap.data().color;
        } else {
            userColor = generateRandomColor();
        }
        currentUserColor = userColor;

        await setDoc(userDocRef, {
            nickname: nickname,
            color: userColor,
            createdAt: serverTimestamp()
        }, { merge: true });

        document.getElementById("login-screen").style.display = "none";
        document.getElementById("main-app").style.display = "block";
        document.getElementById("welcome-msg").textContent = `HoÅŸ geldin, ${nickname}!`;
		console.log("KullanÄ±cÄ± belgesi baÅŸarÄ±yla yazÄ±ldÄ±/gÃ¼ncellendi."); // Bu mesaj gÃ¶rÃ¼nmeli


        loadInitialData();
    } catch (error) {
        console.error("GiriÅŸ hatasÄ± (loginButton):", error); // Bu hatayÄ± mÄ± gÃ¶rÃ¼yorsun?
        alert("GiriÅŸ yapÄ±lamadÄ±: " + error.message);
    }
});

// KullanÄ±cÄ± Ã§Ä±kÄ±ÅŸÄ±
async function logout() {
    try {
        await auth.signOut();
        currentUserUid = null;
        currentUserNickname = null;
        currentUserColor = null;
        $("#main-app").hide();
        $("#login-screen").show();
        $("#nickname").val("");
        $("#message-input-container").addClass("d-none-important");
        clearInterval(shoutInterval);
        $("#shout-text-display").text("HenÃ¼z haykÄ±rma yok.");
    } catch (error) {
        console.error("Ã‡Ä±kÄ±ÅŸ hatasÄ±:", error);
        alert("Ã‡Ä±kÄ±ÅŸ yapÄ±lÄ±rken bir hata oluÅŸtu.");
    }
}

// Mesaj gÃ¶nderme
async function sendMessage() {
    if (!currentUserUid) {
        alert("Mesaj gÃ¶ndermek iÃ§in giriÅŸ yapmalÄ±sÄ±n!");
        return;
    }
    const text = $("#message-input").val().trim();
    if (!text) return alert("Mesaj boÅŸ olamaz!");

    try {
        await addDoc(collection(db, "messages"), {
            text,
            userUid: currentUserUid,
            nickname: currentUserNickname,
            color: currentUserColor,
            createdAt: serverTimestamp(),
            reactions: {},
            replies: []
        });
        $("#message-input").val("");
        $("#message-input-container").addClass("d-none-important");
    } catch (error) {
        console.error("Mesaj gÃ¶nderme hatasÄ±:", error);
        alert("Mesaj gÃ¶nderilemedi.");
    }
}

// Tepki butonlarÄ±nÄ± render etme
function renderReactions(msgId, reactions) {
    let html = "";
    const emojis = ["ðŸ˜‚", "ðŸ˜²", "ðŸ¤”"];
    emojis.forEach(e => {
        const usersReacted = reactions?.[e] || [];
        const count = usersReacted.length;

        const hasReacted = currentUserUid && usersReacted.includes(currentUserUid);
        const btnClass = hasReacted ? "btn-primary" : "btn-outline-light";

        html += `<button class="btn btn-sm ${btnClass} me-1 react-btn" data-message-id="${msgId}" data-emoji="${e}">${e}`;
        if (count > 0) html += ` <span class="badge bg-danger">${count}</span>`;
        html += "</button>";
    });
    return html;
}

// Tepki verme/geri Ã§ekme
async function react(messageId, emoji) {
    if (!currentUserUid) {
        alert("Tepki vermek iÃ§in giriÅŸ yapmalÄ±sÄ±n!");
        return;
    }

    const messageRef = doc(db, "messages", messageId);
    try {
        const messageDoc = await getDoc(messageRef);
        if (messageDoc.exists()) {
            const currentReactions = messageDoc.data().reactions || {};
            const usersReacted = currentReactions[emoji] || [];

            if (usersReacted.includes(currentUserUid)) {
                await updateDoc(messageRef, {
                    [`reactions.${emoji}`]: arrayRemove(currentUserUid)
                });
            } else {
                await updateDoc(messageRef, {
                    [`reactions.${emoji}`]: arrayUnion(currentUserUid)
                });
            }
        }
    } catch (error) {
        console.error("Tepki hatasÄ±:", error);
        alert("Tepki verilemedi.");
    }
}

// MesajlarÄ± yÃ¼kleme ve listeleme (Real-time dinleme)
function loadMessages() {
    const messagesRef = collection(db, "messages");
    const q = query(messagesRef, orderBy("createdAt", "desc"));

    onSnapshot(q, async (snapshot) => {
        const messages = [];
        const nicknamePromises = [];

        console.log("--- loadMessages BaÅŸladÄ± ---");
        console.log("Mesajlar Snapshot boÅŸ mu?", snapshot.empty);
        console.log("Mesajlar Snapshot belge sayÄ±sÄ±:", snapshot.size);

        snapshot.forEach(doc => {
            const data = doc.data();
            messages.push({ id: doc.id, ...data });
            nicknamePromises.push(getNicknameByUid(data.userUid));
            (data.replies || []).forEach(reply => {
                nicknamePromises.push(getNicknameByUid(reply.userUid));
            });
        });

        await Promise.all(nicknamePromises);

        console.log("Filtreleme sonrasÄ± 'messages' dizisi boyutu:", messages.length);

        const totalPages = Math.ceil(messages.length / MESSAGES_PER_PAGE);
        if (currentPage > totalPages) currentPage = totalPages || 1;

        $("#pagination").empty();
        for (let i = 1; i <= totalPages; i++) {
            const active = i === currentPage ? "active" : "";
            $("#pagination").append(`<li class="page-item ${active}"><a href="#" class="page-link">${i}</a></li>`);
        }

        const start = (currentPage - 1) * MESSAGES_PER_PAGE;
        const pageMessages = messages.slice(start, start + MESSAGES_PER_PAGE);

        const $list = $("#message-list").empty();

        if (pageMessages.length === 0) {
            $list.append("<p class='text-center text-muted mt-3'>HenÃ¼z mesaj yok.</p>");
            return;
        }

        for (const msg of pageMessages) {
            const repliesCount = (msg.replies || []).length;
            const { nickname: displayUser, color: userColor } = uidToNicknameMap[msg.userUid] || { nickname: "Bilinmeyen KullanÄ±cÄ±", color: "#CCCCCC" }; // Cache'den al

            const msgEl = $(`
                <div class="message">
                    <div><strong style="color: ${userColor};">${displayUser}</strong> <small class="text-muted">${formatDateTime(msg.createdAt)}</small></div>
                    <div class="mt-1 mb-2">${msg.text}</div>
                    <div class="reactions">${renderReactions(msg.id, msg.reactions)}</div>
                    <div class="mt-1">
                        ${repliesCount > 0 ? `<button class="btn btn-sm btn-link p-0 view-replies-toggle" data-message-id="${msg.id}" data-replies-count="${repliesCount}">YanÄ±tlar (${Math.min(5, repliesCount)})</button>` : ''}
                        <button class="btn btn-sm btn-link p-0 add-reply-btn" data-message-id="${msg.id}">Yeni YanÄ±t Ekle</button>
                    </div>
                    <div class="replies-container" style="display:none;"></div>
                </div>
            `);

            const $repliesContainer = msgEl.find(".replies-container");
            if (repliesCount > 0) {
                const repliesToShow = (msg.replies || []).slice(-5);
                for (const rep of repliesToShow) {
                    const { nickname: displayReplyUser, color: replyUserColor } = uidToNicknameMap[rep.userUid] || { nickname: "Bilinmeyen KullanÄ±cÄ±", color: "#CCCCCC" };
                    const repEl = $(`
                        <div class="reply-message mt-1 p-2 rounded" style="background:#444; color:#eee;">
                            <strong style="color: ${replyUserColor};">${displayReplyUser}</strong> <small class="text-muted">${formatDateTime(rep.createdAt)}</small><br/>
                            ${rep.text}
                        </div>
                    `);
                    $repliesContainer.append(repEl);
                }
            }
            $list.append(msgEl);
        }

        $("#pagination").off("click", ".page-link").on("click", ".page-link", function (e) {
            e.preventDefault();
            currentPage = parseInt($(this).text());
        });

        $("#message-list").off('click', '.react-btn').on('click', '.react-btn', function () {
            const messageId = $(this).data('message-id');
            const emoji = $(this).data('emoji');
            react(messageId, emoji);
        });

        $("#message-list").off('click', '.view-replies-toggle').on('click', '.view-replies-toggle', function () {
            const $button = $(this);
            const $repliesContainer = $button.closest(".message").find(".replies-container");
            const repliesCount = $button.data('replies-count');

            $repliesContainer.slideToggle(400, function() {
                if ($(this).is(":visible")) {
                    $button.text("YanÄ±tlarÄ± Gizle");
                } else {
                    $button.text(`YanÄ±tlar (${Math.min(5, repliesCount)})`);
                }
            });
        });

        $("#message-list").off('click', '.add-reply-btn').on('click', '.add-reply-btn', function () {
            const messageId = $(this).data('message-id');
            addReply(messageId);
        });
    });
}

// YanÄ±t ekleme
async function addReply(messageId) {
    if (!currentUserUid) {
        alert("YanÄ±t vermek iÃ§in giriÅŸ yapmalÄ±sÄ±n!");
        return;
    }
    const replyText = prompt("YanÄ±tÄ±nÄ±zÄ± yazÄ±n:");
    if (replyText && replyText.trim() !== "") {
        const messageRef = doc(db, "messages", messageId);
        try {
            await updateDoc(messageRef, {
                replies: arrayUnion({
                    userUid: currentUserUid,
                    nickname: currentUserNickname,
                    color: currentUserColor,
                    text: replyText.trim(),
                    createdAt: new Date()
                })
            });
        } catch (error) {
            console.error("YanÄ±t ekleme hatasÄ±:", error);
            alert("YanÄ±t eklenemedi.");
        }
    }
}

// En Ã§ok tepki alan mesajlarÄ± yÃ¼kleme
function loadTopMessages() {
    const messagesRef = collection(db, "messages");
    const q = query(messagesRef, orderBy("createdAt", "desc"));

    onSnapshot(q, async (snapshot) => {
        let messages = [];
        const nicknamePromises = [];

        snapshot.forEach(doc => {
            const data = doc.data();
            messages.push({ id: doc.id, ...data });
            nicknamePromises.push(getNicknameByUid(data.userUid));
        });

        await Promise.all(nicknamePromises);

        const sorted = messages.slice().sort((a, b) => getTotalReactions(b) - getTotalReactions(a)).slice(0, 2);
        if (sorted.length === 0) {
            $("#top-messages-list").text("HenÃ¼z yok.");
            return;
        }

        const htmlPromises = sorted.map(async m => {
            const { nickname: displayUser, color: userColor } = uidToNicknameMap[m.userUid] || { nickname: "Bilinmeyen KullanÄ±cÄ±", color: "#CCCCCC" };
            return `<div class="mb-2 p-2 rounded message">
                <div><strong style="color: ${userColor};">${displayUser}</strong> <small class="text-muted">${formatDateTime(m.createdAt)}</small></div>
                <div>${m.text}</div>
                <div class="reactions mt-2">${renderReactions(m.id, m.reactions)}</div>
            </div>`;
        });

        const html = (await Promise.all(htmlPromises)).join("");
        $("#top-messages-list").html(html);

        $("#top-messages-list").off('click', '.react-btn').on('click', '.react-btn', function() {
            const messageId = $(this).data('message-id');
            const emoji = $(this).data('emoji');
            react(messageId, emoji);
        });
    });
}

// GÃ¼nlÃ¼k soruyu ayarlama (Firestore'dan okuma/yazma)
async function setDailyQuestion() {
    const dailyQuestionDocRef = doc(db, "appSettings", "dailyQuestion");

    try {
        const docSnap = await getDoc(dailyQuestionDocRef);
        const now = new Date();
        const todayString = now.toLocaleDateString("tr-TR"); // "gg.aa.yyyy" formatÄ±nda tarih

        if (docSnap.exists()) {
            const data = docSnap.data();
            const lastQuestionDate = data.date; // Bu 'gg.aa.yyyy' formatÄ±nda olmalÄ±

            // Tarih karÅŸÄ±laÅŸtÄ±rmasÄ±: KayÄ±tlÄ± tarih bugÃ¼nden farklÄ± mÄ±?
            if (lastQuestionDate !== todayString) {
                // Yeni gÃ¼n, soruyu deÄŸiÅŸtir ve eski cevaplarÄ± temizle
                const randomIndex = Math.floor(Math.random() * dailyQuestions.length);
                currentDailyQuestion = dailyQuestions[randomIndex].trim();
                await setDoc(dailyQuestionDocRef, {
                    date: todayString,
                    question: currentDailyQuestion
                });
                console.log("Yeni gÃ¼nlÃ¼k soru ayarlandÄ± ve eski cevaplar temizleniyor.");
                await clearOldAnswers(); // Eski cevaplarÄ± temizle
            } else {
                // AynÄ± gÃ¼n, mevcut soruyu kullan
                currentDailyQuestion = data.question;
            }
        } else {
            // Belge yoksa, ilk defa soru ayarla
            const randomIndex = Math.floor(Math.random() * dailyQuestions.length);
            currentDailyQuestion = dailyQuestions[randomIndex].trim();
            await setDoc(dailyQuestionDocRef, {
                date: todayString,
                question: currentDailyQuestion
            });
            console.log("Ä°lk gÃ¼nlÃ¼k soru ayarlandÄ±.");
        }
        $("#daily-question p b").text(`Soru: ${currentDailyQuestion}`);
        loadAnswers();
    } catch (error) {
        console.error("GÃ¼nlÃ¼k soru ayarlama hatasÄ±:", error);
        $("#daily-question p b").text("Soru yÃ¼klenemedi.");
    }
}

// Eski gÃ¼nlÃ¼k soru cevaplarÄ±nÄ± temizleme
async function clearOldAnswers() {
    const answersRef = collection(db, "answers");
    const q = query(answersRef, where("question", "!=", currentDailyQuestion)); // Mevcut sorudan farklÄ± olan tÃ¼m cevaplarÄ± hedefle

    try {
        const snapshot = await getDocs(q);
        if (snapshot.empty) {
            console.log("Eski gÃ¼nlÃ¼k soru cevaplarÄ± bulunamadÄ±.");
            return;
        }

        const batch = writeBatch(db);
        snapshot.docs.forEach(docSnapshot => {
            batch.delete(doc(db, "answers", docSnapshot.id));
        });

        await batch.commit();
        console.log(`${snapshot.size} adet eski gÃ¼nlÃ¼k soru cevabÄ± baÅŸarÄ±yla silindi.`);
    } catch (error) {
        console.error("Eski gÃ¼nlÃ¼k soru cevaplarÄ± temizlenirken hata oluÅŸtu:", error);
    }
}


// GÃ¼nlÃ¼k soruya cevap gÃ¶nderme
async function submitAnswer() {
    if (!currentUserUid) {
        alert("Cevap vermek iÃ§in giriÅŸ yapmalÄ±sÄ±n!");
        return;
    }
    const answerText = $("#daily-answer").val().trim();
    if (!answerText) return alert("CevabÄ±n boÅŸ olamaz!");

    try {
        const answersRef = collection(db, "answers");
        const q = query(answersRef,
            where("userUid", "==", currentUserUid),
            where("question", "==", currentDailyQuestion),
            limit(1)
        );
        const querySnapshot = await getDocs(q);

        if (!querySnapshot.empty) {
            const docToUpdate = querySnapshot.docs[0];
            await updateDoc(doc(db, "answers", docToUpdate.id), {
                text: answerText,
                createdAt: serverTimestamp()
            });
            alert("CevabÄ±nÄ±z gÃ¼ncellendi!");
        } else {
            await addDoc(answersRef, {
                userUid: currentUserUid,
                nickname: currentUserNickname,
                color: currentUserColor,
                question: currentDailyQuestion,
                text: answerText,
                createdAt: serverTimestamp()
            });
            alert("CevabÄ±nÄ±z gÃ¶nderildi!");
        }
        $("#daily-answer").val("");
        loadAnswers();
    } catch (error) {
        console.error("Cevap gÃ¶nderme hatasÄ±:", error);
        alert("Cevap gÃ¶nderilemedi.");
    }
}

// CevaplarÄ± yÃ¼kleme ve listeleme
function loadAnswers() {
    if (!currentDailyQuestion) {
        console.warn("loadAnswers: currentDailyQuestion henÃ¼z ayarlanmadÄ±.");
        $("#answers-list").text("HenÃ¼z cevap yok.");
        return;
    }

    const answersRef = collection(db, "answers");
    const q = query(answersRef,
        where("question", "==", currentDailyQuestion),
        orderBy("createdAt", "asc")
    );

    onSnapshot(q, async (snapshot) => {
        console.log("--- loadAnswers BaÅŸladÄ± ---");
        console.log("Answers Snapshot BoÅŸ mu?", snapshot.empty);
        console.log("Answers Snapshot belge sayÄ±sÄ±:", snapshot.size);
        console.log("currentDailyQuestion deÄŸeri:", currentDailyQuestion);

        const answers = [];
        const nicknamePromises = [];

        snapshot.forEach(doc => {
            const data = doc.data();
            answers.push({ id: doc.id, ...data });
            nicknamePromises.push(getNicknameByUid(data.userUid));
        });

        console.log("OluÅŸturulan Answers Dizisi boyutu:", answers.length);

        await Promise.all(nicknamePromises);

        const $list = $("#answers-list").empty();

        if (answers.length === 0) {
            $list.text("HenÃ¼z cevap yok.");
            return;
        }

        for (const ans of answers) {
            const { nickname: displayUser, color: userColor } = uidToNicknameMap[ans.userUid] || { nickname: "Bilinmeyen KullanÄ±cÄ±", color: "#CCCCCC" };
            $list.append(`
                <div class="mb-2 p-2 rounded" style="background:#333; color:#fff;">
                    <strong style="color: ${userColor};">${displayUser}:</strong> ${ans.text} <small class="text-muted">${formatDateTime(ans.createdAt)}</small>
                </div>
            `);
        }
        $list.scrollTop($list[0].scrollHeight);
    });
}

// Yeni fonksiyon: Eski mesajlarÄ± ve haykÄ±rmalarÄ± temizle (24 saatten eski olanlar)
// Verileri temizleme fonksiyonu (cleanupOldData)
// Verileri temizleme fonksiyonu (cleanupOldData)
async function cleanupOldData() {
    console.log("cleanupOldData Ã§alÄ±ÅŸÄ±yor...");
    const now = new Date();
    const twentyFourHoursAgo = new Date(now.getTime() - (24 * 60 * 60 * 1000));
    console.log("Åžu anki zaman:", now.toLocaleString());
    console.log("24 saat Ã¶nceki zaman (silme eÅŸiÄŸi):", twentyFourHoursAgo.toLocaleString());

    const collectionsToClean = ['messages', 'shouts', 'secret_room_messages'];

    for (const collectionName of collectionsToClean) {
        console.log(`--- Koleksiyon '${collectionName}' iÃ§in temizlik baÅŸlatÄ±lÄ±yor ---`);
        console.log(`Sorgu: createdAt < ${twentyFourHoursAgo.toLocaleString()}`); // Sorgu eÅŸiÄŸini logla

        const q = query(collection(db, collectionName), where("createdAt", "<", twentyFourHoursAgo));
        let querySnapshot;
        try {
            querySnapshot = await getDocs(q);
        } catch (error) {
            console.error(`Koleksiyon '${collectionName}' iÃ§in belge alÄ±nÄ±rken hata oluÅŸtu:`, error);
            // Hata durumunda dÃ¶ngÃ¼den Ã§Ä±kma, diÄŸer koleksiyonlara devam et
            continue;
        }


        if (querySnapshot.empty) {
            console.log(`Koleksiyon '${collectionName}' iÃ§inde temizlenecek eski veri bulunamadÄ±.`);
            continue;
        }

        console.log(`Koleksiyon '${collectionName}' iÃ§inde ${querySnapshot.size} adet eski belge bulundu.`);
        // Bulunan belgelerin ID'lerini ve createdAt tarihlerini logla
        querySnapshot.docs.forEach(docSnapshot => {
            const data = docSnapshot.data();
            console.log(`  - Belge ID: ${docSnapshot.id}, createdAt: ${data.createdAt ? data.createdAt.toDate().toLocaleString() : 'Yok'}`);
        });

        const batch = writeBatch(db);
        querySnapshot.docs.forEach((doc) => {
            batch.delete(doc.ref);
        });

        try {
            await batch.commit();
            console.log(`Koleksiyon '${collectionName}' iÃ§inde ${querySnapshot.size} adet eski belge baÅŸarÄ±yla silindi.`);
        } catch (error) {
            console.error(`Koleksiyon '${collectionName}' iÃ§indeki eski belgeler silinirken batch commit hatasÄ± oluÅŸtu:`, error);
        }
        console.log(`--- Koleksiyon '${collectionName}' temizlik tamamlandÄ± ---`);
    }
}

// Gece YarÄ±sÄ±na Kadar Geri SayÄ±m ve Ä°ÅŸlemler
function countdownToMidnight() {
    const updateCountdown = async () => {
        const now = new Date();
        const midnight = new Date(now);
        midnight.setHours(24, 0, 0, 0); // Bir sonraki gece yarÄ±sÄ±

        let remaining = midnight.getTime() - now.getTime();
		
		 

        if (remaining <= 0) {
            // EÄŸer sÃ¼re dolmuÅŸsa veya geÃ§miÅŸse (bir sonraki gÃ¼ne geÃ§miÅŸse)
            // Geri sayÄ±mÄ± gÃ¼ncelleyip tekrar Ã§alÄ±ÅŸtÄ±rÄ±yoruz, 1 saniye bekle
            // Bu, hemen temizlik iÅŸlemini tetiklemek yerine, bir sonraki saniyede doÄŸru hesaplama iÃ§in
            setTimeout(async () => {
                $("#countdown").text("Yeni gÃ¼n baÅŸladÄ±! Veriler temizleniyor...");
                console.log("Gece yarÄ±sÄ± tetiklendi. Veriler temizleniyor...");
                await cleanupOldData(); // MesajlarÄ± ve haykÄ±rmalarÄ± temizle
                await setDailyQuestion(); // Yeni gÃ¼nlÃ¼k soruyu ayarla ve eski cevaplarÄ± temizle
                // Veri temizliÄŸi ve soru ayarlandÄ±ktan sonra sayacÄ± tekrar baÅŸlat
                updateCountdown(); // Bir sonraki gece yarÄ±sÄ±na gÃ¶re tekrar hesapla
                // ArayÃ¼zÃ¼ yenilemek iÃ§in gerekli Ã§aÄŸrÄ±lar:
                loadMessages();
                loadTopMessages();
                loadAnswers(); // setDailyQuestion iÃ§inde Ã§aÄŸrÄ±lÄ±yor ama emin olmak iÃ§in
                console.log("Veri temizleme ve soru ayarlama tamamlandÄ±.");
            }, 1000); // 1 saniye bekle
            return;
        }

        const hours = Math.floor(remaining / (1000 * 60 * 60)).toString().padStart(2, '0');
        const minutes = Math.floor((remaining / (1000 * 60)) % 60).toString().padStart(2, '0');
        const seconds = Math.floor((remaining / 1000) % 60).toString().padStart(2, '0');
        $("#countdown").text(`Yeni gÃ¼n iÃ§in: ${hours}sa ${minutes}dk ${seconds}sn`);
    };

    // Ä°lk Ã§alÄ±ÅŸtÄ±rma ve her saniye gÃ¼ncelleme
    updateCountdown();
    setInterval(updateCountdown, 1000);
}


// HaykÄ±rma rotasyonunu baÅŸlatma (Real-time dinleme)
function startShoutRotation() {
    const shoutsRef = collection(db, "shouts");
    const q = query(shoutsRef, orderBy("createdAt", "desc"));

    onSnapshot(q, async (snapshot) => {
        shoutMessages = [];
        const nicknamePromises = [];

        snapshot.forEach(doc => {
            const data = doc.data();
            shoutMessages.push({ id: doc.id, ...data });
            nicknamePromises.push(getNicknameByUid(data.userUid));
        });

        await Promise.all(nicknamePromises);

        if (shoutInterval) clearInterval(shoutInterval);
        shoutIndex = 0;

        if (shoutMessages.length === 0) {
            $("#shout-text-display").text("HenÃ¼z haykÄ±rma yok.");
            return;
        }

        const { nickname: firstShoutUser, color: firstShoutColor } = uidToNicknameMap[shoutMessages[shoutIndex].userUid] || { nickname: "Bilinmeyen KullanÄ±cÄ±", color: "#CCCCCC" };
        $("#shout-text-display").html(`<span style="color: ${firstShoutColor};">${firstShoutUser}</span>: ${shoutMessages[shoutIndex].text}`).show();

        shoutInterval = setInterval(async () => {
            shoutIndex++;
            if (shoutIndex >= shoutMessages.length) shoutIndex = 0;

            const { nickname: currentShoutUser, color: currentShoutColor } = uidToNicknameMap[shoutMessages[shoutIndex].userUid] || { nickname: "Bilinmeyen KullanÄ±cÄ±", color: "#CCCCCC" };
            $("#shout-text-display").fadeOut(500, function() {
                $(this).html(`<span style="color: ${currentShoutColor};">${currentShoutUser}</span>: ${shoutMessages[shoutIndex].text}`).fadeIn(500);
            });
        }, 3000);
    });
}

// HaykÄ±rma modalÄ±nÄ± aÃ§ma
function openShoutModal() {
    const shoutModal = new bootstrap.Modal(document.getElementById('shoutModal'));
    //$("#shout-input").val('');
    shoutModal.show();
}

// HaykÄ±rma mesajÄ± gÃ¶nderme
async function sendShout() {
    if (!currentUserUid) {
        alert("HaykÄ±rmak iÃ§in giriÅŸ yapmalÄ±sÄ±n!");
        return;
    }
    const shoutText = $("#shout-input").val().trim();
    if (!shoutText) {
        alert("HaykÄ±rmak istediÄŸin mesaj boÅŸ olamaz!");
        return;
    }
    if (shoutText.length > 150) {
        alert("HaykÄ±rma mesajÄ± en fazla 150 karakter olabilir.");
        return;
    }

    try {
        await addDoc(collection(db, "shouts"), {
            userUid: currentUserUid,
            nickname: currentUserNickname,
            color: currentUserColor,
            text: shoutText,
            createdAt: serverTimestamp()
        });
        $("#shout-input").val("");
        bootstrap.Modal.getInstance(document.getElementById('shoutModal')).hide();
    } catch (error) {
        console.error("HaykÄ±rma gÃ¶nderme hatasÄ±:", error);
        alert("HaykÄ±rma gÃ¶nderilemedi.");
    }
}

// Uygulama baÅŸlangÄ±cÄ±nda Ã§alÄ±ÅŸacak fonksiyon (jQuery document ready)
// Yeni fonksiyon: Uygulama baÅŸlangÄ±cÄ±nda yÃ¼klenmesi gereken tÃ¼m verileri ve iÅŸlevleri baÅŸlatÄ±r
async function loadInitialData() {
    console.log("loadInitialData: Uygulama baÅŸlangÄ±Ã§ verileri yÃ¼kleniyor...");
    await setDailyQuestion(); // GÃ¼nlÃ¼k soruyu ayarla (ve eski cevaplarÄ± temizler)
    loadMessages(); // Ana sayfa mesajlarÄ±nÄ± yÃ¼kle
    //loadTopMessages(); // Top mesajlarÄ± yÃ¼kle
    startShoutRotation(); // HaykÄ±rma rotasyonunu baÅŸlat
    countdownToMidnight(); // Geri sayÄ±mÄ± baÅŸlat (ve gece yarÄ±sÄ± temizliÄŸi/soru gÃ¼ncellemesi yapar)
}

// Uygulama baÅŸlangÄ±cÄ±nda Ã§alÄ±ÅŸacak fonksiyon (jQuery document ready)
$(function () {
    $("#message-input-container").addClass("d-none-important");

     onAuthStateChanged(auth, async (user) => {
        console.log("onAuthStateChanged tetiklendi. user:", user ? user.uid : "null");

        if (user) {
            // KullanÄ±cÄ± zaten oturum aÃ§mÄ±ÅŸ (veya oturumu sÃ¼rdÃ¼rÃ¼lmÃ¼ÅŸ)
            currentUserUid = user.uid;
            console.log("KullanÄ±cÄ± durumu: GÄ°RÄ°Åž YAPILMIÅž veya OTURUM SÃœRDÃœRÃœLMÃœÅž.", "UID:", currentUserUid);

            const userDocRef = doc(db, "users", currentUserUid);
            const userDocSnap = await getDoc(userDocRef);

            if (userDocSnap.exists()) {
                const userData = userDocSnap.data();
                currentUserNickname = userData.nickname;
                currentUserColor = userData.color || generateRandomColor();
                if (!userData.color) {
                    await updateDoc(userDocRef, { color: currentUserColor });
                }
                console.log("KullanÄ±cÄ± profili bulundu:", currentUserNickname);
            } else {
                // Bu durum normalde olmamalÄ±dÄ±r, Ã§Ã¼nkÃ¼ anonim giriÅŸte profil oluÅŸturulur.
                // EÄŸer buraya dÃ¼ÅŸÃ¼yorsa, oturum bozulmuÅŸ veya eski bir anonim UID'ye denk gelmiÅŸ olabilir.
                // Bu senaryoda kullanÄ±cÄ±dan tekrar nick istemek en doÄŸrusu.
                console.warn("KullanÄ±cÄ± Auth'ta var ancak Firestore'da profili eksik. Yeniden nick girilmesi istenecek.");
                currentUserNickname = null; // Nickname'i sÄ±fÄ±rla ki giriÅŸ ekranÄ± gÃ¶rÃ¼nsÃ¼n
                currentUserColor = null;
                $("#main-app").hide();
                $("#login-screen").show();
                $("#current-user-info").text("GiriÅŸ yapÄ±nÄ±z.");
                return; // Bu durumda daha fazla iÅŸlem yapma, giriÅŸ ekranÄ±nÄ± bekle
            }

            $("#current-user-info").text(`GiriÅŸ yapÄ±ldÄ±: ${currentUserNickname} (UID: ${currentUserUid})`);
            $("#login-screen").hide();
            $("#main-app").show();
            
            // KullanÄ±cÄ± baÅŸarÄ±yla yÃ¼klendiÄŸinde/oluÅŸturulduÄŸunda tÃ¼m baÅŸlangÄ±Ã§ verilerini yÃ¼kle
            loadInitialData(); // <-- Bu her baÅŸarÄ±lÄ± giriÅŸte Ã§alÄ±ÅŸÄ±r
            
        } else {
            // KullanÄ±cÄ± oturum aÃ§mamÄ±ÅŸ (ilk yÃ¼kleme veya Ã§Ä±kÄ±ÅŸ yapÄ±lmÄ±ÅŸ)
            console.log("KullanÄ±cÄ± durumu: Ã‡IKIÅž YAPILMIÅž.");
            currentUserUid = null;
            currentUserNickname = null;
            currentUserColor = null;
            $("#main-app").hide();
            $("#login-screen").show(); // HER ZAMAN GÄ°RÄ°Åž EKRANINI GÃ–STER
            $("#current-user-info").text("GiriÅŸ yapÄ±nÄ±z.");
            $("#message-input-container").addClass("d-none-important"); // GiriÅŸ yapÄ±lana kadar mesaj kutusunu gizle
            
            // EÄŸer burasÄ± bir "loginButton" click olayÄ± DEÄžÄ°LSE, anonim giriÅŸ YAPMA!
            // signInAnonymously Ã§aÄŸrÄ±sÄ±nÄ± buradan kaldÄ±rÄ±n.
            // Sadece kullanÄ±cÄ± "GiriÅŸ Yap" butonuna bastÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lmalÄ±.
        }
    });

    // Login Ä°ÅŸlemleri (loginButton click listener)
    // BU KOD ZATEN MEVCUT OLMALI, BURADA DEÄžÄ°ÅžÄ°KLÄ°K YAPMA!
    document.getElementById("loginButton").addEventListener("click", async () => {
        const nickname = document.getElementById("nickname").value.trim();

        if (!nickname) {
            alert("LÃ¼tfen bir nick girin.");
            return;
        }

        try {
            // Anonim giriÅŸ sadece burada, kullanÄ±cÄ± butona bastÄ±ÄŸÄ±nda tetiklenmeli
            const userCredential = await signInAnonymously(auth);
            const user = userCredential.user;
            currentUserUid = user.uid;
            currentUserNickname = nickname; // KullanÄ±cÄ±nÄ±n girdiÄŸi nick'i kullan

            let userColor = null;
            const userDocRef = doc(db, "users", currentUserUid);
            const userDocSnap = await getDoc(userDocRef);

            if (userDocSnap.exists() && userDocSnap.data().color) {
                userColor = userDocSnap.data().color;
            } else {
                userColor = generateRandomColor();
            }
            currentUserColor = userColor;

            await setDoc(userDocRef, {
                nickname: nickname, // KullanÄ±cÄ±nÄ±n girdiÄŸi nick
                color: userColor,
                createdAt: serverTimestamp()
            }, { merge: true });

            document.getElementById("login-screen").style.display = "none";
            document.getElementById("main-app").style.display = "block";
            document.getElementById("welcome-msg").textContent = `HoÅŸ geldin, ${nickname}!`;
            
            // GiriÅŸ baÅŸarÄ±lÄ± olduÄŸunda ilk verileri yÃ¼kle
            loadInitialData(); // <-- Bu da Ã¶nemli
            
        } catch (error) {
            console.error("GiriÅŸ hatasÄ±:", error);
            alert("GiriÅŸ yapÄ±lamadÄ±: " + error.message);
        }
    });


    // DiÄŸer Event Listeners (Bunlar zaten doÄŸru yerde olmalÄ±)
    $("#logout-button").on("click", logout);
    $("#message-send-btn").on("click", sendMessage);
    $("#message-input").on("keypress", function (e) {
        if (e.which == 13) {
            sendMessage();
        }
    });
    $("#send-shout-btn").on("click", openShoutModal);
    $("#submit-shout-btn").on("click", sendShout);
    $("#submit-daily-answer-btn").on("click", submitAnswer);
    $("#open-secret-room-btn").on("click", () => {
        window.location.href = "secret_room.html";
    });


  
    $("#toggle-theme-btn").on("click", () => {
        $("body").toggleClass("light dark");
    });
	
	$("#toggle-message-input-btn").on("click", () => {
        $("#message-input-container").removeClass("d-none-important");
    });
	
    // Event Listeners (Bunlar doÄŸru yerde)
    $("#logout-btn").on("click", logout);
    $("#send-message-btn").on("click", sendMessage);
    $("#message-input").on("keypress", function (e) {
        if (e.which == 13) {
            sendMessage();
        }
    });
    $("#shout-btn").on("click", openShoutModal);
    $("#send-shout-btn").on("click", sendShout);
    $("#submit-answer-btn").on("click", submitAnswer);
    $("#secret-room-btn").on("click", () => {
        window.location.href = "secret_room.html";
    });
});
